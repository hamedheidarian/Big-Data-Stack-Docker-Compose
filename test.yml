version: "3"
services:

  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - hadoop_namenode:/hadoop/dfs/namenode
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop.env
  datanode1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode1
    restart: always
    volumes:
      - hadoop_datanode1:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
  datanode2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode2
    restart: always
    volumes:
      - hadoop_datanode2:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
  datanode3:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode3
    restart: always
    volumes:
      - hadoop_datanode3:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
  datanode4:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode4
    restart: always
    volumes:
      - hadoop_datanode4:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
  datanode5:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode5
    restart: always
    volumes:
      - hadoop_datanode5:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
  datanode6:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode6
    restart: always
    volumes:
      - hadoop_datanode6:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env

  master:
    image: gettyimages/spark
    command: bin/spark-class org.apache.spark.deploy.master.Master -h master
    hostname: master
    environment:
      MASTER: spark://master:7077
      SPARK_CONF_DIR: /conf
      SPARK_PUBLIC_DNS: localhost
    expose:
      - 7001
      - 7002
      - 7003
      - 7004
      - 7005
      - 7006
      - 7077
      - 6066
    ports:
      - 4040:4040
      - 6066:6066
      - 7077:7077
      - 8765:8080
 #   volumes:
 #     - ./conf/master:/conf
 #     - ./data:/data
  spark2:
    image: gettyimages/spark
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://master:7077
    hostname: spark2
    environment:
      SPARK_CONF_DIR: /conf
      SPARK_WORKER_CORES: 1
      SPARK_WORKER_MEMORY: 1g
      SPARK_WORKER_PORT: 8881
      SPARK_WORKER_WEBUI_PORT: 8081
      SPARK_PUBLIC_DNS: localhost
    links:
      - master
    expose:
      - 7012
      - 7013
      - 7014
      - 7015
      - 7016
      - 8881
    ports:
      - 8081:8081
 #   volumes:
 #     - ./conf/worker:/conf
 #     - ./data:/data
  spark3:
    image: gettyimages/spark
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://master:7077
    hostname: spark3
    environment:
      SPARK_CONF_DIR: /conf
      SPARK_WORKER_CORES: 1
      SPARK_WORKER_MEMORY: 1g
      SPARK_WORKER_PORT: 8881
      SPARK_WORKER_WEBUI_PORT: 8081
      SPARK_PUBLIC_DNS: localhost
    links:
      - master
    expose:
      - 7012
      - 7013
      - 7014
      - 7015
      - 7016
      - 8881
    ports:
      - 8082:8081
 #   volumes:
 #     - ./conf/worker:/conf
 #     - ./data:/data
  spark4:
    image: gettyimages/spark
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://master:7077
    hostname: spark4
    environment:
      SPARK_CONF_DIR: /conf
      SPARK_WORKER_CORES: 1
      SPARK_WORKER_MEMORY: 1g
      SPARK_WORKER_PORT: 8881
      SPARK_WORKER_WEBUI_PORT: 8081
      SPARK_PUBLIC_DNS: localhost
    links:
      - master
    expose:
      - 7012
      - 7013
      - 7014
      - 7015
      - 7016
      - 8881
    ports:
      - 8083:8081
 #   volumes:
 #     - ./conf/worker:/conf
 #     - ./data:/data
  spark5:
    image: gettyimages/spark
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://master:7077
    hostname: spark5
    environment:
      SPARK_CONF_DIR: /conf
      SPARK_WORKER_CORES: 1
      SPARK_WORKER_MEMORY: 1g
      SPARK_WORKER_PORT: 8881
      SPARK_WORKER_WEBUI_PORT: 8081
      SPARK_PUBLIC_DNS: localhost
    links:
      - master
    expose:
      - 7012
      - 7013
      - 7014
      - 7015
      - 7016
      - 8881
    ports:
      - 8084:8081
 #   volumes:
 #     - ./conf/worker:/conf
 #     - ./data:/data
  spark6:
    image: gettyimages/spark
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://master:7077
    hostname: spark6
    environment:
      SPARK_CONF_DIR: /conf
      SPARK_WORKER_CORES: 1
      SPARK_WORKER_MEMORY: 1g
      SPARK_WORKER_PORT: 8881
      SPARK_WORKER_WEBUI_PORT: 8081
      SPARK_PUBLIC_DNS: localhost
    links:
      - master
    expose:
      - 7012
      - 7013
      - 7014
      - 7015
      - 7016
      - 8881
    ports:
      - 8085:8081
 #   volumes:
 #     - ./conf/worker:/conf
 #     - ./data:/data
  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9870 namenode:9000 datanode1:9864 datanode2:9864 datanode3:9864 datanode4:9864 datanode5:9864 datanode6:9864"
    env_file:
      - ./hadoop.env
    depends_on:
      - namenode
      - datanode1
      - datanode2
      - datanode3
      - datanode4
      - datanode5
      - datanode6
  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager1
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9870 namenode:9000 datanode1:9864 datanode2:9864 datanode3:9864 datanode4:9864 datanode5:9864 datanode6:9864"
    env_file:
      - ./hadoop.env
  nodemanager2:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager2
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9870 namenode:9000 datanode1:9864 datanode2:9864 datanode3:9864 datanode4:9864 datanode5:9864 datanode6:9864"
    env_file:
      - ./hadoop.env
  nodemanager3:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager3
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9870 namenode:9000 datanode1:9864 datanode2:9864 datanode3:9864 datanode4:9864 datanode5:9864 datanode6:9864"
    env_file:
      - ./hadoop.env
  nodemanager4:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager4
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9870 namenode:9000 datanode1:9864 datanode2:9864 datanode3:9864 datanode4:9864 datanode5:9864 datanode6:9864"
    env_file:
      - ./hadoop.env
  nodemanager5:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager5
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9870 namenode:9000 datanode1:9864 datanode2:9864 datanode3:9864 datanode4:9864 datanode5:9864 datanode6:9864"
    env_file:
      - ./hadoop.env
  nodemanager6:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager6
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9870 namenode:9000 datanode1:9864 datanode2:9864 datanode3:9864 datanode4:9864 datanode5:9864 datanode6:9864"
    env_file:
      - ./hadoop.env
  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9870 namenode:9000 datanode1:9864 datanode2:9864 datanode3:9864 datanode4:9864 datanode5:9864 datanode6:9864 resourcemanager:8088"
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline
    env_file:
      - ./hadoop.env

  zooleeper1:
    image: confluentinc/cp-zookeeper:6.2.1
    hostname: zooleeper1
    environment:
      ZOOKEEPER_SERVER_ID: "1"
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVERS: zooleeper1:2888:3888;zooleeper2:2888:3888;zooleeper3:2888:3888;zookeeper4:2888:3888;zookeeper5:2888:3888;zookeeper6:2888:3888;zookeeper7:2888:3888
      ZOOKEEPER_GROUPS: 1:2:3;4:5:6;7
  zooleeper2:
    image: confluentinc/cp-zookeeper:6.2.1
    hostname: zooleeper2
    environment:
      ZOOKEEPER_SERVER_ID: "2"
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVERS: zooleeper1:2888:3888;zooleeper2:2888:3888;zooleeper3:2888:3888;zookeeper4:2888:3888;zookeeper5:2888:3888;zookeeper6:2888:3888;zookeeper7:2888:3888
      ZOOKEEPER_GROUPS: 1:2:3;4:5:6;7
  zooleeper3:
    image: confluentinc/cp-zookeeper:6.2.1
    hostname: zooleeper3
    environment:
      ZOOKEEPER_SERVER_ID: "3"
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVERS: zooleeper1:2888:3888;zooleeper2:2888:3888;zooleeper3:2888:3888;zookeeper4:2888:3888;zookeeper5:2888:3888;zookeeper6:2888:3888;zookeeper7:2888:3888
      ZOOKEEPER_GROUPS: 1:2:3;4:5:6;7
  zookeeper4:
    image: confluentinc/cp-zookeeper:6.2.1
    hostname: zookeeper4
    environment:
      ZOOKEEPER_SERVER_ID: "4"
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVERS: zooleeper1:2888:3888;zooleeper2:2888:3888;zooleeper3:2888:3888;zookeeper4:2888:3888;zookeeper5:2888:3888;zookeeper6:2888:3888;zookeeper7:2888:3888
      ZOOKEEPER_GROUPS: 1:2:3;4:5:6;7
  zookeeper5:
    image: confluentinc/cp-zookeeper:6.2.1
    hostname: zookeeper5
    environment:
      ZOOKEEPER_SERVER_ID: "5"
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVERS: zooleeper1:2888:3888;zooleeper2:2888:3888;zooleeper3:2888:3888;zookeeper4:2888:3888;zookeeper5:2888:3888;zookeeper6:2888:3888;zookeeper7:2888:3888
      ZOOKEEPER_GROUPS: 1:2:3;4:5:6;7
  zookeeper6:
    image: confluentinc/cp-zookeeper:6.2.1
    hostname: zookeeper6
    environment:
      ZOOKEEPER_SERVER_ID: "6"
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVERS: zooleeper1:2888:3888;zooleeper2:2888:3888;zooleeper3:2888:3888;zookeeper4:2888:3888;zookeeper5:2888:3888;zookeeper6:2888:3888;zookeeper7:2888:3888
      ZOOKEEPER_GROUPS: 1:2:3;4:5:6;7
  zookeeper7:
    image: confluentinc/cp-zookeeper:6.2.1
    hostname: zookeeper7
    environment:
      ZOOKEEPER_SERVER_ID: "7"
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVERS: zooleeper1:2888:3888;zooleeper2:2888:3888;zooleeper3:2888:3888;zookeeper4:2888:3888;zookeeper5:2888:3888;zookeeper6:2888:3888;zookeeper7:2888:3888
      ZOOKEEPER_GROUPS: 1:2:3;4:5:6;7
  kafka1:
    image: confluentinc/cp-kafka:6.2.1
    hostname: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:zooleeper1,zoo1:zooleeper2,zoo1:zooleeper3,zoo1:zookeeper4,zoo1:zookeeper5,zoo1:zookeeper6,zoo1:zookeeper7"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    depends_on:
      - zooleeper1
      - zooleeper2
      - zooleeper3
      - zookeeper4
      - zookeeper5
      - zookeeper6
      - zookeeper7

  kafka2:
    image: confluentinc/cp-kafka:6.2.1
    hostname: kafka2
    ports:
      - "9093:9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19093,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:zooleeper1,zoo1:zooleeper2,zoo1:zooleeper3,zoo1:zookeeper4,zoo1:zookeeper5,zoo1:zookeeper6,zoo1:zookeeper7"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    depends_on:
      - zooleeper1
      - zooleeper2
      - zooleeper3
      - zookeeper4
      - zookeeper5
      - zookeeper6
      - zookeeper7

  kafka3:
    image: confluentinc/cp-kafka:6.2.1
    hostname: kafka3
    ports:
      - "9094:9094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:19094,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:zooleeper1,zoo1:zooleeper2,zoo1:zooleeper3,zoo1:zookeeper4,zoo1:zookeeper5,zoo1:zookeeper6,zoo1:zookeeper7"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    depends_on:
      - zooleeper1
      - zooleeper2
      - zooleeper3
      - zookeeper4
      - zookeeper5
      - zookeeper6
      - zookeeper7

  cassandra1:
    container_name: cassandra1
    image: docker.io/bitnami/cassandra:4.0
    environment:
      - CASSANDRA_SEEDS=cassandra1,cassandra2,cassandra3,cassandra4,cassandra5,cassandra6
      - CASSANDRA_CLUSTER_NAME=cassandra-cluster
      #- CASSANDRA_PASSWORD=cassandra
      - MAX_HEAP_SIZE=2G
      - HEAP_NEWSIZE=200M

  cassandra2:
    container_name: cassandra2
    image: docker.io/bitnami/cassandra:4.0
    environment:
      - CASSANDRA_SEEDS=cassandra1,cassandra2,cassandra3,cassandra4,cassandra5,cassandra6
      - CASSANDRA_CLUSTER_NAME=cassandra-cluster
      #- CASSANDRA_PASSWORD=cassandra
      - MAX_HEAP_SIZE=2G
      - HEAP_NEWSIZE=200M

  cassandra3:
    container_name: cassandra3
    image: docker.io/bitnami/cassandra:4.0
    environment:
      - CASSANDRA_SEEDS=cassandra1,cassandra2,cassandra3,cassandra4,cassandra5,cassandra6
      - CASSANDRA_CLUSTER_NAME=cassandra-cluster
      #- CASSANDRA_PASSWORD=cassandra
      - MAX_HEAP_SIZE=2G
      - HEAP_NEWSIZE=200M

  cassandra4:
    container_name: cassandra4
    image: docker.io/bitnami/cassandra:4.0
    environment:
      - CASSANDRA_SEEDS=cassandra1,cassandra2,cassandra3,cassandra4,cassandra5,cassandra6
      - CASSANDRA_CLUSTER_NAME=cassandra-cluster
      #- CASSANDRA_PASSWORD=cassandra
      - MAX_HEAP_SIZE=2G
      - HEAP_NEWSIZE=200M

  cassandra5:
    container_name: cassandra5
    image: docker.io/bitnami/cassandra:4.0
    environment:
      - CASSANDRA_SEEDS=cassandra1,cassandra2,cassandra3,cassandra4,cassandra5,cassandra6
      - CASSANDRA_CLUSTER_NAME=cassandra-cluster
      #- CASSANDRA_PASSWORD=cassandra
      - MAX_HEAP_SIZE=2G
      - HEAP_NEWSIZE=200M

  cassandra6:
    container_name: cassandra6
    image: docker.io/bitnami/cassandra:4.0
    environment:
      - CASSANDRA_SEEDS=cassandra1,cassandra2,cassandra3,cassandra4,cassandra5,cassandra6
      - CASSANDRA_CLUSTER_NAME=cassandra-cluster
      #- CASSANDRA_PASSWORD=cassandra
      - MAX_HEAP_SIZE=2G
      - HEAP_NEWSIZE=200M

  postgresql:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres
    ports:
      - 5432:5432
    volumes:
      - postgresql-data:/var/lib/postgresql/data

  zeppelin:
    image: apache/zeppelin:0.10.0
    ports:
      - 8888:8080
#    volumes:
 #     - notebook:/opt/zeppelin/notebook
      
  sqoop:
    image: dvoros/sqoop
    volumes:
      - postgresql-data:/jdbc
    environment:
      POSTGRES_ADDRESS: jdbc:postgresql://localhost:5432/postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_USERNAME: postgres
      POSTGRES_DB: postgres
    depends_on:
      - "postgresql"
      - "namenode"
    ports:
      - 16000:16000
      #- 5432:5432
      
  akka1:
    container_name: akka1
    build:
      context: ./akka
      dockerfile: Dockerfile
      
  avro1:
    container_name: avro1
    build:
      context: ./avro
      dockerfile: Dockerfile    


volumes:
  postgresql-data:
  hadoop_namenode:
  hadoop_datanode1:
  hadoop_datanode2:
  hadoop_datanode3:
  hadoop_datanode4:
  hadoop_datanode5:
  hadoop_datanode6:
  hadoop_historyserver:
  cassandra1:
   driver: local
  cassandra2:
   driver: local
  cassandra3:
   driver: local
  cassandra4:
   driver: local
  cassandra5:
   driver: local
  cassandra6:
   driver: local
#  notebook:
